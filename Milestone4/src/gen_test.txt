//
//  A recursive-descent calculator.  Not particularly robust!
//

calculator()
{
	init();
	//parser();
}

//
//  Input wrappers, so we can push back a character.
//

boolean _havechar;
int _char;

int getc()
{
	if (_havechar) {
		_havechar = false;
		return _char;
	}
	return getchar();
}

void ungetc(int ch)
{
	if (_havechar) {
		prints("Internal error: too many ungets!\n");
		halt();
	}
	_havechar = true;
	_char = ch;
}

//
//  Scanner.
//

boolean _havetoken;
int _token;
int attr;

int peek()
{
	if (_havetoken)
		return _token;

	_havetoken = true;
	return _token = scanner();
}

void match(int expect)
{
	if (peek() != expect) {
		prints("Error: expected ");
		printc(expect);			// XXX - not always printable
		prints("\n");
		halt();
	}
	_havetoken = false;
}

int scanner()
{
	int ch;

	while (isspace(ch = getc()))
		;

	if (ch == EOF)			return TK_EOF;
	if (ch == ASCII_NL)		return TK_EOLN;
	if (ch == ASCII_PLUS)		return TK_ADD;
	if (ch == ASCII_MINUS)		return TK_SUB;
	if (ch == ASCII_STAR)		return TK_MUL;
	if (ch == ASCII_SLASH)		return TK_DIV;
	if (ch == ASCII_LPAREN)		return TK_LPAREN;
	if (ch == ASCII_RPAREN)		return TK_RPAREN;

	if (isdigit(ch)) {
		attr = 0;
		while (isdigit(ch)) {
			attr = attr * 10 + (ch - ASCII_0);
			ch = getc();
		}
		ungetc(ch);
		return TK_NUMBER;
	}

	prints("Error: invalid character.\n");
	halt();
}

boolean isdigit(int ch)
{
	return ch >= ASCII_0 && ch <= ASCII_9; // TODO
}

boolean isspace(int ch)
{
	return ch == ASCII_SPACE ||
	       ch == ASCII_TAB ||
	       ch == ASCII_CR;
}



//
//  Initialization.
//

int EOF;

int TK_EOF;
int TK_EOLN;
int TK_NUMBER;
int TK_ADD;
int TK_SUB;
int TK_MUL;
int TK_DIV;
int TK_LPAREN;
int TK_RPAREN;

int ASCII_0;
int ASCII_9;
int ASCII_PLUS;
int ASCII_MINUS;
int ASCII_STAR;
int ASCII_SLASH;
int ASCII_LPAREN;
int ASCII_RPAREN;
int ASCII_SPACE;
int ASCII_TAB;
int ASCII_CR;
int ASCII_NL;

void init()
{
	EOF = -1;

	ASCII_0 = 48;
	ASCII_9 = 57;
	ASCII_PLUS = 43;
	ASCII_MINUS = 45;
	ASCII_STAR = 42;
	ASCII_SLASH = 47;
	ASCII_LPAREN = 40;
	ASCII_RPAREN = 41;
	ASCII_SPACE = 32;
	ASCII_TAB = 9;
	ASCII_CR = 13;
	ASCII_NL = 10;

	TK_EOF = 256;
	TK_NUMBER = 257;
	TK_ADD = ASCII_PLUS;
	TK_SUB = ASCII_MINUS;
	TK_MUL = ASCII_STAR;
	TK_DIV = ASCII_SLASH;
	TK_LPAREN = ASCII_LPAREN;
	TK_RPAREN = ASCII_RPAREN;
	TK_EOLN = ASCII_NL;
}